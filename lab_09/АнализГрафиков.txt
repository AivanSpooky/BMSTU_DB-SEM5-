График 1: Без изменения данных в БД
На этом графике видно, что изначально время выполнения запроса к БД значительно превышает время запроса через Redis (красная линия намного выше синей). Однако, после первого выполнения запросов, Redis обеспечивает практически постоянное низкое время ответа. Это ожидаемое поведение, поскольку Redis позволяет быстро получать данные, используя кэширование, а прямые запросы к базе данных могут занимать больше времени из-за необходимости выполнения чтения с диска и обработки на стороне сервера базы данных.

График 2: Добавление новых строк каждые 10 секунд
Здесь видно, что при добавлении новых строк время выполнения через Redis (синяя линия) колеблется сильнее, чем через БД (красная линия). Это связано с тем, что кэшированные данные могут устаревать, когда добавляются новые строки, что требует их обновления. В результате в некоторых случаях время запроса через Redis становится больше, чем время обращения напрямую к БД, так как необходимо сбрасывать кэш и снова наполнять его актуальными данными.

График 3: Удаление строк каждые 10 секунд
На этом графике также видно, что время запроса через Redis и время запроса к БД примерно сравнимы, с колебаниями в обе стороны. Время выполнения через Redis все еще остается низким в некоторых случаях, однако время запроса к БД более стабильно. Это связано с тем, что при удалении строк в БД кэш может стать неактуальным, и его нужно сбросить и перестроить.

График 4: Изменение строк каждые 10 секунд
На графике видно, что изменения строк в БД создают значительные колебания времени выполнения запросов через Redis. В случае с Redis время выполнения запроса иногда значительно превышает время прямого запроса к БД, особенно в моменты, когда происходит изменение данных и требуется сброс кэша.




ВЫВОДЫ:
Redis показывает значительное преимущество при повторных запросах, так как кэшированные данные возвращаются гораздо быстрее.
Использование Redis эффективно для снижения задержек при частых одинаковых запросах.
При частом добавлении новых данных Redis может терять свои преимущества из-за необходимости обновления кэша.
Прямой запрос к БД в таком случае может быть более стабильным, так как работает всегда с актуальными данными.
Удаление данных создает необходимость инвалидации кэша, что может снизить эффективность Redis.
При изменении данных кэш Redis также должен быть актуализирован, что увеличивает время выполнения запроса.